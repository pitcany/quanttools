Below is how to get exactly the "data" + "ml" groups (and nothing else) given the current Poetry behavior and your existing lock file.

---

## 1) The relevant bits in your pyproject.toml

You have five optional groups (data, ml, viz, notebook, dl) and one always-on "dev" group:

```toml
# Core data science dependencies
[tool.poetry.group.data]
optional = true

[tool.poetry.group.data.dependencies]
numpy  = "^1.25"
pandas = "^2.1"
scipy  = "^1.11"

# Machine learning dependencies
[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
scikit-learn      = "^1.3"
xgboost           = "^3.0.5"
lightgbm          = "^4.6.0"
catboost          = "^1.1"
optuna            = "^4.5"
mlflow            = "^3.4"
wandb             = "^0.22"
shap              = "^0.48"
imbalanced-learn  = "^0.14"
category-encoders = "^2.8"

# …and similarly for viz, notebook, dl…

# Development dependencies (always installed by default)
[tool.poetry.group.dev.dependencies]
pytest     = "^7.4"
black      = "^24.7"
isort      = "^5.12"
flake8     = "^7.0"
mypy       = "^1.5"
pre-commit = "^3.0"
```

---

## 2) Poetry’s CLI flags in a nutshell

```text
Options:
     --without=WITHOUT      The dependency groups to ignore. (multiple values allowed)
     --with=WITH            The optional dependency groups to include. (multiple values allowed)
     --only=ONLY            The only dependency groups to include. (multiple values allowed)
     --no-root              Do not install the root package (the current project).
```

- **`--with=<group>`** → installs "default" + **dev** (dev is default-on) + whatever extra group(s) you name.
- **`--only=<group>`** → installs "default" + exactly the named group(s) (dev and all other optional groups are excluded unless you explicitly add them).
- **`--without=<group>`** → explicitly skip installing a given group (even if it’s default-on).

---

## 3) Why `--only data,ml` by itself can still pull in viz/notebook/dl

Because your lock file already contains all the transitive pins for every group, a known regression in Poetry 2.2.x/1.5.x means that even `--only data,ml` will happily install any optional packages that were baked into the lock file. You end up seeing viz/notebook/dl things sneak in.

---

## 4) The surefire command: explicitly opt out of the unwanted groups

To install **only** the data + ml stack (plus the Python runtime), you must both state `--only` and explicitly `--without` each of the other optional groups:

```bash
poetry install \
  --only data,ml \
  --without viz \
  --without notebook \
  --without dl \
  --without dev
```

If you also want to skip installing your own project package (i.e. pull only libraries), add `--no-root`:

```bash
poetry install \
  --only data,ml \
  --without viz \
  --without notebook \
  --without dl \
  --without dev \
  --no-root
```

That combination forces Poetry to install only the data and ml groups and nothing else.

---

## 5) (Optional) A cleaner future: upgrade Poetry

This pain point (both `--with` and `--only` over-including optional groups) has been addressed in Poetry 2.4+ (as well as in 2.3.x alpha/beta releases). If you’re able to upgrade to Poetry 2.4+ then simply doing:

```bash
poetry install --only data,ml --no-root
```

will work exactly as expected, without the need for all the `--without` flags.

---

### Summary

| Desired groups            | Command (Poetry 2.2.x/1.5.x)                                                                       |
|:--------------------------|:--------------------------------------------------------------------------------------------------|
| Only data + ml            | `poetry install --only data,ml --without viz --without notebook --without dl --without dev`         |
| Only data + ml (no-root)  | `poetry install --only data,ml --without viz --without notebook --without dl --without dev --no-root` |
| (Future Poetry 2.3+)      | `poetry install --only data,ml --no-root`                                                         |

---

Feel free to pick whichever fits your workflow.

---
## 6) Locking or installing only the optimization group

If you need to lock or install **only** the optimization group (and your project’s core dependencies) without pulling in incompatible packages like TensorFlow, you must explicitly exclude the other optional groups:

```bash
poetry install \
  --only optimization \
  --without data \
  --without ml \
  --without viz \
  --without notebook \
  --without dl \
  --without dev
```

In Poetry 2.4+ you can similarly lock only the optimization group:

```bash
poetry lock --only optimization
```
